swagger: "2.0"
info:
  description: "Collection of endpoints for managing the user's identity and authentication."
  version: "1.0.0"
  title: "Identity Service"
  contact: {}
host: "localhost:2324"
schemes:
  - "https"
# will be prefixed to all paths
basePath: /v

securityDefinitions:
  BasicAuth:
    description: "HTTP Basic Authentication"
    type: "basic"

parameters:
  userId:
    name: userId
    in: path
    description: The unquie identifier of a user.
    required: true
    type: string

paths:
  /login:
    post:
      summary: "Login User"
      description: |
        "Uses requires a username and password hash in the body. If the username/password combination is correct then the user is
        logged in an a session ID is returned."
      produces:
      - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/definitions/LoginRequest'
      responses:
        200:
          description: |
            "The user was logged in successfully and a new session was started."
          schema:
            $ref: "#/definitions/Session"
          headers:
            Set-Authorization:
              type: "string"
              description: "Encoded JWT session object."
        401:
          description: "Authentication failed."
          schema:
            type: "string"
        500:
          description: "Internal Error"
          schema:
            type: "string"
  /logout/{userId}:
    post:
      summary: "Logout User"
      description: |
        "Logs a user out by their User ID (not their username). Does nothing
        if the user doesn't exist or is not logged in."
      parameters:
        - $ref: '#/parameters/userId'
      responses:
        200:
          description: |
            "The user was logged out successfully."
          schema:
            type: "string"
  /users:
    post:
      summary: "Create User"
      description: "Creates a new user in the system."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/NewUserRequest"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/NewUser"
        500:
          description: "Could not access the database."

definitions:
  NewUserRequest:
    description: "Required properties for defining a new user."
    type: "object"
    required:
    - emailAddress
    - firstName
    - lastName
    - userName
    - password
    properties:
      userName:
        type: "string"
        description: "The unique lable for the user to login with."
      firstName:
        type: "string"
        description: "The user's given name."
      lastName:
        type: "string"
        description: "The user's family name."
      emailAddress:
        type: "string"
      password:
        type: "string"
        description: "The the user's password encoded with base64."
  NewUser:
    type: "object"
    required:
    - userId
    properties:
      userId:
        type: "string"
        description: |
          "The unique identifier of the user in the formate of a type IV UUID."
  LoginRequest:
    type: "object"
    description: "A user's login request."
    required:
      - userName
      - password
    properties:
      userName:
        type: "string"
        description: "The unique lable for the user to login with."
      password:
        type: "string"
        description: "The the user's password encoded with base64."
  Session:
    type: "object"
    description: "Represents a logged in user. Note: The session token will be returned in a custom header."
    required:
    - userId
    properties:
      userId:
        type: "string"
        description: |
          "The unique identifier of the user in the formate of a type IV UUID."
