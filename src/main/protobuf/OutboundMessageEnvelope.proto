// VERSION 1
syntax = "proto2";

package org.machine.engine.messages;

// type = "double" | "float" | "int32" | "int64" | "uint32" | "uint64"
//      | "sint32" | "sint64" | "fixed32" | "fixed64" | "sfixed32" | "sfixed64"
      //| "bool" | "string" | "bytes" | messageType | enumType
message ResponseMessage{
  enum ActionType{
    UNKNOWN_ACTION = 0;
    CREATE = 1;
    RETRIEVE = 2;
    UPDATE = 3;
    DELETE = 4;
    SHUTDOWN = 5;
  }

  enum ErrorType{
    UNKNOWN_ERROR_TYPE = 0;
    //The engine could not deserialize or was missing data.
    INVALID_REQUEST = 1;
    //Internal query error. To return the cypher query, specify VERBOSE
    //for the ProcessType
    QUERY_ERROR = 2;
  }

  enum EntityType{
    UNKNOWN_ENTITY = 0;
    DATA_SET = 1;
    ELEMENT_DEFINITION = 2;
    ELEMENT = 3;
    ASSOCIATION = 4;
  }

  message Error{
    optional ErrorType errorType = 1;
    optional string errorMessage = 2; //Human readable error message.
  }

  message Id{
    optional string id = 1;
    optional EntityType entityType = 2;
  }

  message Association{
    optional string id = 1;
    optional string associationType = 2; //The Label on the association. If omitted then the label "is_associated_with" is applied.
    repeated Field fields = 3;
    optional string startingElementId = 4;
    optional string endingElementId = 5;
    optional string creationTime = 6; //Probably going to change the type
    optional string lastModifiedType = 7; //This will be ommitted if the Association has never been edited.
  }

  message Field{
    optional string name = 1;
    optional string field_type = 2; //Java primitive types
    optional string value = 3; //Pass as string vs byte vs Any.
  }

  message Element{
    optional string id = 1;
    optional string element_type = 2;
    optional string description = 3;
    repeated Field fields = 4;
    optional string creationTime = 5; //Probably going to change the type
    optional string lastModifiedType = 6; //This will be ommitted if the Element has never been edited.
  }

  message ElementDefinition{
    optional string id = 1;
    optional string name = 2;
    optional string description = 3;
    repeated PropertyDefinition properties = 4;
    optional string creationTime = 5; //Probably going to change the type
    optional string lastModifiedType = 6; //This will be ommitted if the ElementDefinition has never been edited.
  }

  message PropertyDefinition{
    optional string id = 1;
    optional string name = 2;
    optional string property_definition_type = 3;
    optional string description = 4;
    optional string creationTime = 5; //Probably going to change the type
    optional string lastModifiedType = 6; //This will be ommitted if the PropertyDefinition has never been edited.
  }

  message DataSet{
    optional string id = 1;
    optional string name = 2;
    optional string description = 3;
    optional string creationTime = 4; //Probably going to change the type
    optional string lastModifiedType = 5; //This will be ommitted if the DataSet has never been edited.
  }

  message Associations{
    repeated Association association = 1;
  }

  message Elements{
    repeated Element element = 1;
  }

  message ElementDefinitions{
    repeated ElementDefinition elementDefintion = 7;
  }

  message DataSets{
    repeated DataSet dataset = 1;
  }

  //Every response should have an ID. This ID could be used for UNDO?
  //Or would it be better to have the client assign an ID to a command.
  //Then use the inbound command ID for undo? That approach exposes the
  //engine to a risk that the command ID could collide with multiple clients
  //or poor client code.
  //The client needs some way to know that the message coming back is the one
  //that it is waiting for. A client specified ID would provide that. Perhaps
  //a UUID would be better. I just hate doing string comparisions if not needed.
  optional uint64 resultId = 1;

  //Was the engine able to successfully process the request.
  optional bool successful = 2;

  oneof payload{
    //If successful = false, then an error message will be returned.
    Error error = 3;
    Id id = 4; //If ActionType = CREATE | UPDATE, the identifier of what was created will be returned.
    Associations associations = 5;
    Elements elements = 6;
    ElementDefinitions elementDefintions = 7;
    DataSets datasets = 8;
  }
}
